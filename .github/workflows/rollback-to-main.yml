name: Rollback MAIN to Backup Version

on:
  workflow_dispatch:

jobs:
  rollback-main:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0
          
      - name: Fetch backup branch
        run: |
          git fetch origin backup
          echo "Verificando a versão de backup..."
          
          # Verificar se a branch backup existe
          BACKUP_EXISTS=$(git ls-remote --heads origin backup | wc -l)
          
          if [ "$BACKUP_EXISTS" -eq "0" ]; then
            echo "::error::Branch backup não existe! É necessário criar um backup primeiro."
            exit 1
          fi
          
          BACKUP_COMMIT=$(git rev-parse origin/backup)
          echo "Commit do backup: $BACKUP_COMMIT"
      
      - name: Backup Current Production Before Rollback
        env:
          SSH_PASS: 9TKSUsh2PAV
        run: |
          sudo apt-get install -y sshpass rsync
          export SSHPASS=$SSH_PASS
          
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          BACKUP_FOLDER="pre_rollback_$TIMESTAMP"
          
          sshpass -e ssh -o StrictHostKeyChecking=no root@157.230.229.74 "mkdir -p /root/wpp-multiatendimento/backup/$BACKUP_FOLDER && cp -r /root/wpp-multiatendimento/main/* /root/wpp-multiatendimento/backup/$BACKUP_FOLDER/ || true"
          
          echo "Backup de segurança criado: $BACKUP_FOLDER"
      
      - name: Reset main to backup version
        run: |
          # Reset o branch main para o mesmo estado do backup
          git reset --hard origin/backup
          
          # Force push para atualizar o branch main remoto
          git push --force origin main
          
          echo "Branch main foi restaurado para a versão de backup!"
      
      - name: Deploy to Production Server
        env:
          SSH_PASS: 9TKSUsh2PAV
        run: |
          export SSHPASS=$SSH_PASS
          
          # Usar rsync com a opção --delete para excluir arquivos que não existem mais
          # Excluir node_modules e arquivos .env para preservar configurações locais
          sshpass -e rsync -avz --delete --exclude="node_modules" --exclude=".env" -e "ssh -o StrictHostKeyChecking=no" ./ root@157.230.229.74:/root/wpp-multiatendimento/main/
          
          # Reiniciar a aplicação
          sshpass -e ssh -o StrictHostKeyChecking=no root@157.230.229.74 'cd /root/wpp-multiatendimento/main && npm install && export BRANCH=main && pm2 delete wpp-multiatendimento-main || true && PORT=3000 BRANCH=main pm2 start index.js --name wpp-multiatendimento-main'
          
          echo "Branch main restaurado para a versão de backup e sincronizado com a VPS!"
