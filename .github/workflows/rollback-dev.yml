name: Rollback DEV to Backup Version

on:
  workflow_dispatch:

jobs:
  rollback-dev:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout backup branch
        uses: actions/checkout@v3
        with:
          ref: backup
          fetch-depth: 0
          
      - name: Reset dev to backup version
        run: |
          # Configurar Git
          git config user.name "GitHub Action"
          git config user.email "actions@github.com"
          
          # Obter SHA do backup atual
          BACKUP_SHA=$(git rev-parse HEAD)
          echo "Current backup SHA: $BACKUP_SHA"
          
          # Fazer checkout do branch dev
          git fetch origin dev
          git checkout dev
          
          # Resetar dev para a versão do backup
          git reset --hard $BACKUP_SHA
          
          # Push forçado para o branch dev
          git push --force origin dev
          
          echo "Branch dev restaurado para a versão estável (branch backup)!"
      
      - name: Deploy to Dev Server
        env:
          SSH_PASS: 9TKSUsh2PAV
        run: |
          sudo apt-get install -y sshpass rsync
          export SSHPASS=$SSH_PASS
          
          # Usar rsync com a opção --delete para excluir arquivos que não existem mais
          sshpass -e rsync -avz --delete --exclude="node_modules" -e "ssh -o StrictHostKeyChecking=no" ./ root@157.230.229.74:/root/wpp-multiatendimento/dev/
          
          # Reiniciar a aplicação
          sshpass -e ssh -o StrictHostKeyChecking=no root@157.230.229.74 'cd /root/wpp-multiatendimento/dev && npm install && export BRANCH=dev && pm2 delete wpp-multiatendimento-dev || true && PORT=3001 BRANCH=dev pm2 start index.js --name wpp-multiatendimento-dev'
          
          echo "Branch dev restaurado e sincronizado com a VPS!"